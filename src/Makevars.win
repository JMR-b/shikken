## This assumes that we can call Rscript to ask Rcpp about its locations
## Use the R_HOME indirection to support installations of multiple R version
PKG_LIBS = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript.exe" -e "Rcpp:::LdFlags()")
PKG_LIBS += $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)
R_PLATFORM=windows ## hack

.PHONY : .depend clean

## To define other targets to compile, the first target has to be `all`
## Having `all` depend on $(SHLIB) directs it to compile the libraries
## when all is said and done
all: .depend $(SHLIB)

###############################################################################
## Variables and targets taken/inspired from shogun's configure stuff

SHIKKEN_HEADERS  = $(shell find . -name "*.h")
SHIKKEN_SRCFILES = $(shell find . -name "*.c" -o -name "*.cpp")
SRCFILES = $(SHIKKEN_SRCFILES)
DEFINES =

-include config.site

## Check to see if we are compiling against a system-install of shogun
## and check that it is kosher
ifdef WITH_SYS_SHOGUN
  include Makevars.system-shogun
else
  include Makevars.shikken-shogun
endif

OBJECTS   = $(patsubst %.cpp,%.cpp.o, $(patsubst %.c,%.c.o, $(SRCFILES)))

## TODO: check if -pthread is appropriate for windows?
PKG_LIBS += -lm -pthread # -llapack -lcblas

%.cpp.o: %.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(PKG_CXXFLAGS) $(DEFINES) -c $< -o $@

## The shogun-toolbox has make rules that target and compile "normal" .c files,
## but there are none of these files here yet.
%.c.o: %.c
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(PKG_CXXFLAGS) $(DEFINES) -c $< -o $@

clean:
	rm -f $(OBJECTS)
	rm *.so
