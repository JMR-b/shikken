## This Makevars was was made througn an "agressive" trial and error approach
## by combining things I've found in other package Makevars files along with
## parts of the shogun-toolbox's configure files.
## 
## It would likely have been better handled by judicious use of autoconf
## support in the R CMD INSTALL processes, but I haven't invested the time
## to get cozy with autoconf yet. Users who want to tweak the compilation
## process of this library (along with its internal shogun library) are
## currently required to set/export environment variables before they run
## R CMD INSTALL, instead of autoconf magically figuring out the correct
## variables -- which would (ultimately) be the better approach..
## 
## If you are reading this Makevars file with the hope of learning how to use
## it correctly with R CMD INSTALL, you might be looking at the wrong place.
##
## See here for a handy Makefile reference:
##   http://www.jfranken.de/homepages/johannes/vortraege/make_inhalt.en.html

## For Rcpp
#PKG_CXXFLAGS += -DHAVE_MVEC -DHAVE_LAPACK #
PKG_LIBS +=`$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` $(LAPACK_LIBS) \
  $(BLAS_LIBS) $(FLIBS)

PKG_CXXFLAGS += -I../inst/include

## Always include our shogun header files (not system) because
## shogun/mathematics/Math.h defines PI, but R.h (or similar) defines that
## as a constant
PKG_CXXFLAGS += -I../inst/include/shogun-local
.PHONY : .depend clean

## To define other targets to compile, the first target has to be `all`
## Having `all` depend on $(SHLIB) directs it to compile the libraries
## when all is said and done
all: .depend $(SHLIB)

###############################################################################
## Variables and targets taken/inspired from shogun's configure stuff

SHIKKEN_HEADERS  = $(shell find ../inst/include/shikken -name "*.h")
SHIKKEN_HEADERS  += $(shell find . -name "*.h")

SHIKKEN_SRCFILES = $(shell find ../inst/include/shikken -name "*.c" -o -name "*.cpp")
SHIKKEN_SRCFILES += $(shell find . -name "*.c" -o -name "*.cpp")

SRCFILES = $(SHIKKEN_SRCFILES)

ifdef NO_DEBUG
DEFINES =
else
DEFINES = -DSHIKKEN_DEBUG
endif

-include config.site

## Check to see if we are compiling against a system-install of shogun
## and check that it is kosher
ifdef WITH_SYS_SHOGUN
  include Makevars.system-shogun
else
  include Makevars.shikken-shogun
endif

OBJECTS   = $(patsubst %.cpp,%.cpp.o, $(patsubst %.c,%.c.o, $(SRCFILES)))

## TODO: check if -pthread is appropriate for windows?
PKG_LIBS += -lm -pthread # -llapack -lcblas

%.cpp.o: %.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(PKG_CXXFLAGS) $(DEFINES) -c $< -o $@

## The shogun-toolbox has make rules that target and compile "normal" .c files,
## but there are none of these files here yet.
%.c.o: %.c
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(PKG_CXXFLAGS) $(DEFINES) -c $< -o $@

clean:
	rm -f $(OBJECTS)
	rm *.so
