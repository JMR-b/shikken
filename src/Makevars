## This Makevars was pretty was made using "agressive" trial and error by
## combining things I've found in other package Makevars files along with
## parts of the shogun-toolbox's configure files.
## 
## If you are a "casual" user trying to figure out how to make a proper
## Makevars so that the library you are trying to wrap in R compiles correctly
## this probably isn't the best place to start learning from since there's a
## good chance I'm doing something that's not exactly "bright".
PKG_CXXFLAGS += -I. -I./shogun -I. -DHAVE_MVEC -DHAVE_LAPACK #
PKG_LIBS +=`$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` $(LAPACK_LIBS) \
  $(BLAS_LIBS) $(FLIBS)

###############################################################################
## Variables and targets taken/inspired from shogun's configure stuff
## These are defined/taken from shoguns configure/.config-cache files
EXT_OBJ_CPP=cpp.o
EXT_OBJ_C=c.o
EXT_SRC_CPP=cpp
EXT_SRC_C=c
SRCDIR=.

## TODO: These defines should be autogenerated during the R CMD INSTALL processes
##       Setup a shikken/configure.in and shikken/src/Makevars.in file to do this
##       Look at RSQLite for reference
DEFINES=-DSHOGUN -DDARWIN -DHAVE_POWL -DHAVE_SQRTL -DHAVE_LOG2 -DHAVE_HDF5 \
  -DUSE_GZIP -DUSE_BZIP2 -DHAVE_LARGEFILE -DUSE_SHORTREAL_KERNELCACHE \
  -DUSE_HMMPARALLELSTRUCTURES -DUSE_HMMPARALLEL -DUSE_BIGSTATES -DUSE_HMMCACHE \
  -DUSE_REFERENCE_COUNTING -DUSE_SVMLIGHT

## TODO: These PKG_LIBS should only link against libraries found during the
##       configure step
PKG_LIBS += -lm -pthread -lhdf5 -lxml2 -lz -lbz2 # -llapack -lcblas

%.$(EXT_OBJ_CPP): %.$(EXT_SRC_CPP)
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(PKG_CXXFLAGS) $(DEFINES) -c $< -o $@

## The shogun-toolbox has make rules that target and compile "normal" .c files,
## but there are none of these files here yet.
# %.$(EXT_OBJ_C): %.$(EXT_SRC_C)
# # $(COMP_C) $(COMPFLAGS_C) $(DEFINES) -c $(INCLUDES) -o $@ $<
#   g++ $(PKG_CXXFLAGS) $(DEFINES) -c $(INCLUDES) -o $@ $<


# HEADERFILES = $(shell find $(SRCDIR) -name "*.$(EXT_SRC_HEADER)" )
# SRCFILES  = $(shell find $(SRCDIR) -name "*.$(EXT_SRC_C)" -o -name "*.$(EXT_SRC_CPP)")
# OBJECTS   = $(patsubst %.$(EXT_SRC_CPP),%.$(EXT_OBJ_CPP), \
#               $(patsubst %.$(EXT_SRC_C),%.$(EXT_OBJ_C), $(SRCFILES)))

PKG_SOURCES = $(shell find $(SRCDIR) -name "*.$(EXT_SRC_C)" -o -name "*.$(EXT_SRC_CPP)")
# OBJECTS=$(PKG_SOURCES:.cpp=.o)
OBJECTS   = $(patsubst %.$(EXT_SRC_CPP),%.$(EXT_OBJ_CPP), \
              $(patsubst %.$(EXT_SRC_C),%.$(EXT_OBJ_C), $(PKG_SOURCES)))

all: myclean .depend $(SHLIB)

## Generetae .depend file. This file generates targets
.depend:
	find $(SRCDIR) -name "*.$(EXT_SRC_C)" -o -name "*.$(EXT_SRC_CPP)" \
  -exec $(CXX) -MM $(DEFINES) $(PKG_CXXFLAGS) {} -MT {}.o \; >.depend

-include .depend

myclean:
	@echo $(OBJECTS)
	rm -f $(OBJECTS)

