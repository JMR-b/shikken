## This Makevars was pretty was made using "agressive" trial and error by
## combining things I've found in other package Makevars files along with
## parts of the shogun-toolbox's configure files.
## 
## If you are a "casual" user trying to figure out how to make a proper
## Makevars so that the library you are trying to wrap in R compiles correctly
## this probably isn't the best place to start learning from since there's a
## good chance I'm doing something that's not exactly "bright".
##
## See here for a handy Makefile reference:
##   http://www.jfranken.de/homepages/johannes/vortraege/make_inhalt.en.html

## For Rcpp
PKG_CXXFLAGS += -I. -I./shogun -I. -DHAVE_MVEC -DHAVE_LAPACK #
PKG_LIBS +=`$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` $(LAPACK_LIBS) \
  $(BLAS_LIBS) $(FLIBS)

.PHONY : .depend clean

## To define other targets to compile, the first target has to be `all`
## Having `all` depend on $(SHLIB) directs it to compile the libraries
## when all is said and done
all: .depend $(SHLIB)

###############################################################################
## Variables and targets taken/inspired from shogun's configure stuff

## Check to see if we are compiling against a system-install of shogun
## and check that it is kosher
ifdef WITH_SHOGUN

## do the headers exits?
ifeq (exists, $(shell [ -d $(WITH_SHOGUN)/include/shogun ]) && echo exists)
$(warning system shogun headers found ...)
else
$(error system shogun install was not found)
endif

endif

EXT_OBJ_CPP=cpp.o
EXT_OBJ_C=c.o
EXT_SRC_CPP=cpp
EXT_SRC_C=c
EXT_SRC_HEADER=h
SRCDIR=.

## TODO: check if -pthread is appropriate for windows?
PKG_LIBS += -lm -pthread # -llapack -lcblas

###############################################################################
## Assuming presence of certain "things" for the most popular platforms
## in order for shogun to comple
DEFINES = -DSHOGUN -DHAVE_POWL -DHAVE_SQRTL -DHAVE_LOG2 \
  -DHAVE_LARGEFILE -DUSE_SHORTREAL_KERNELCACHE \
  -DUSE_HMMPARALLELSTRUCTURES -DUSE_HMMPARALLEL -DUSE_BIGSTATES -DUSE_HMMCACHE \
  -DUSE_REFERENCE_COUNTING

ifeq (darwin, $(findstring darwin,$(R_PLATFORM)))
DEFINES += -DDARWIN -DUSE_GZIP -DUSE_BZIP2
endif

## TODO test linux?
ifeq (linux, $(findstring linux,$(R_PLATFORM)))
DEFINES += -DUSE_GZIP -DUSE_BZIP2
endif

ifndef NO_SVMLIGHT
DEFINES += -DUSE_SVMLIGHT
endif

ifdef HAVE_HDF5
DEFINES += -DHAVE_HDF5
PKG_LIBS += -lhdf5
endif

ifdef HAVE_XML
DEFINS += -DHAVE_XML
PKG_LIBS += -lxml2
endif

## $(findstring find,in) : searches `in` for `find` and returns `find`
## if it is found
ifneq (,$(findstring DUSE_GZIP,$(DEFINES)))
PKG_LIBS += -lz
endif

ifneq (,$(findstring DUSE_BZIP2,$(DEFINES)))
PKG_LIBS += -lbz2
endif

%.$(EXT_OBJ_CPP): %.$(EXT_SRC_CPP)
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(PKG_CXXFLAGS) $(DEFINES) -c $< -o $@

## The shogun-toolbox has make rules that target and compile "normal" .c files,
## but there are none of these files here yet.
# %.$(EXT_OBJ_C): %.$(EXT_SRC_C)
#   $(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(PKG_CXXFLAGS) $(DEFINES) -c $< -o $@

HEADERFILES = $(shell find $(SRCDIR) -name "*.$(EXT_SRC_HEADER)" )
SRCFILES = $(shell find $(SRCDIR) -name "*.$(EXT_SRC_C)" -o -name "*.$(EXT_SRC_CPP)")
OBJECTS   = $(patsubst %.$(EXT_SRC_CPP),%.$(EXT_OBJ_CPP), \
              $(patsubst %.$(EXT_SRC_C),%.$(EXT_OBJ_C), $(SRCFILES)))


## Do we link against an installed libshogun or compile our own?
ifdef WITH_SHOGUN

PKG_CXXFLAGS += $(WITH_SHOGUN)/include
PKG_LIBS += -lshobugn
.depend:
	echo "Compiling against shogun library $(WITH_SHOGUN)"

else

## Compile shikken against the version of shogun that it comes wwth
.depend:
	## Generetae .depend file. This file generates targets
	find $(SRCDIR) -name "*.$(EXT_SRC_C)" -o -name "*.$(EXT_SRC_CPP)" \
  -exec $(CXX) -MM $(DEFINES) $(PKG_CXXFLAGS) {} -MT {}.o \; >.depend
-include .depend
endif

clean:
	rm -f $(OBJECTS)
