Creating External Shogun Objects
================================

A call to `SVM` requires that we build several objects for the final svm.
For instance, we have to:

 (i)   Convert the features matrix from the R side, to a CSimpleFeatures
       object on the C++ side.
 (ii)  Create a kernel/Kernel object from the features in (i)
 (iii) Initialize an SVM with the kernel object (ii) and the features (i)
 (iv)  Train the SVM
  ...

Overview
--------

I think to make this as "clean" as possible, we have to build each object
individually and not just call one "monster" function. In order to do so,
a `createKernel` type of function will need to build a shogun/Kernel object
on the "C" side of things and return a pointer to this back to R.

* When creating these "modular" shogun objects, I think we have to call
  SG_REF(object) so they are not disposed. Similarly, when the object is
  R-garbage collected, ensure that the method invoked on GC (see below)
  must call SG_UNREF(object).

* The R class will have to have a slot of "externalptr" type.
  Section 5.13 of the R-exts document introduces `ExternalPtr`.
  
    * You can register finalizers to external pointers that is run when
      it is garbage collected. This can be R or C code, and the various 
      interfaces are, respectively:
      
        void R_RegisterFinalizerEx(SEXP s, SEXP fun, Rboolean onexit);
        typedef void (*R_CFinalizer_t)(SEXP);
        void R_RegisterCFinalizerEx(SEXP s, R_CFinalizer_t fun, Rboolean onexit);

* Rcpp has an XPtr<T> type you will probably want to use. Read through
  Rcpp-modules vignette.

Summary
-------

Presently, after creating each shikken object, register the `finalize` method
to destroy all shogun pointers in some automated fashion, eg:

    createKernel <- function(...) {
      kernel <- .Call("shikken_kernel", ...)
      ...
      reg.finalizer(kernel, finalize)
      kernel
    }